=================================
 Doctest for 2-matrix_divided.py
=================================


Test if the module has docstring
================================


::
	>>> m = __import__("2-matrix_divided").__doc__
	>>> len(m) > 0
	True


Test if the functionshas docstring
=================================================


::
	>>> f = __import__("2-matrix_divided").matrix_divided.__doc__
	>>> len(f) > 0
	True

::
	>>> f = __import__("2-matrix_divided").check_list_float_int.__doc__
	>>> len(f) > 0
	True

::
	>>> f = __import__("2-matrix_divided").is_int_or_float.__doc__
	>>> len(f) > 0
	True

::
	>>> f = __import__("2-matrix_divided").is_list_of_lists.__doc__
	>>> len(f) > 0
	True

::
	>>> f = __import__("2-matrix_divided").is_list.__doc__
	>>> len(f) > 0
	True

::
	>>> f = __import__("2-matrix_divided").is_same_length.__doc__
	>>> len(f) > 0
	True

::
	>>> f = __import__("2-matrix_divided").full_copy.__doc__
	>>> len(f) > 0
	True

Test for different test related to the matrix
=============================================

Good Values:
============


::
	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
	>>> matrix = [[1.6, -2, -3], [-4.8, 5.9, 6.7], [7, -8, -9]]
	>>> matrix_divided(matrix, 5)
	[[0.32, -0.4, -0.6], [-0.96, 1.18, 1.34], [1.4, -1.6, -1.8]]


Empty list
==========


::
	>>> matrix = []
	>>> matrix_divided(matrix, 5)
	Traceback (most recent call last):
		... 
	TypeError: matrix must be a matrix (list of lists) of integers/floats

None:
======


::
	>>> matrix = None
	>>> matrix_divided(matrix, 5)
	Traceback (most recent call last):
		... 
	TypeError: matrix must be a matrix (list of lists) of integers/floats


Empty matrix with empty list
=============================


::
	>>> matrix = [[], [], []]
	>>> matrix_divided(matrix, 5)
	Traceback (most recent call last):
		... 
	TypeError: matrix must be a matrix (list of lists) of integers/floats


::
	>>> matrix = [None, None, None]
	>>> matrix_divided(matrix, 5)
	Traceback (most recent call last):
		... 
	TypeError: matrix must be a matrix (list of lists) of integers/floats


Matrix with different types
===========================


::
	>>> matrix = [[1, 2, 3], {'id': 25, 'name': "brian", "gender": "Male"}, ("Hello", "German", "English")]
	>>> matrix_divided(matrix, 5)
	Traceback (most recent call last):
		... 
	TypeError: matrix must be a matrix (list of lists) of integers/floats


::
	>>> matrix = [[1, 2, 3], {'id': 25, 'name': "brian", "gender": "Male"}, ("Hello", "German", "English"), None]
	>>> matrix_divided(matrix, 5)
	Traceback (most recent call last):
		... 
	TypeError: matrix must be a matrix (list of lists) of integers/floats


Matrix with empty different types
=================================


::
	>>> matrix = [[], {}, ([])]
	>>> matrix_divided(matrix, 5)
	Traceback (most recent call last):
		... 
	TypeError: matrix must be a matrix (list of lists) of integers/floats


Matrix with length one
======================


::
	>>> matrix = [[1], {'id': 25}, ["Hello"]]
	>>> matrix_divided(matrix, 5)
	Traceback (most recent call last):
		... 
	TypeError: matrix must be a matrix (list of lists) of integers/floats


::
	>>> matrix = [[1], {'id': 25}, ["Hello"], None]
	>>> matrix_divided(matrix, 5)
	Traceback (most recent call last):
		... 
	TypeError: matrix must be a matrix (list of lists) of integers/floats


Matrix with different types filled
==================================


::
	>>> matrix = [[1.6, 2.8, 3.5], {1:"geek", 2:"gook", 3:"migg"}, (-1, 9, -5)]
	>>> matrix_divided(matrix, 5)
	Traceback (most recent call last):
		... 
	TypeError: matrix must be a matrix (list of lists) of integers/floats



Lists with diffrent sizes:
==========================


::
	>>> matrix = [[1.6, -2, -3, 0], [-4.8], [7, -8]]
	>>> matrix_divided(matrix, 5)
	Traceback (most recent call last):
		... 
	TypeError: Each row of the matrix must have the same size



Lists with diffrent sizes:
==========================


::
	>>> matrix = [[1.6, -2, -3, 0], [-4.8, -6, -6.2, -5.4], [7, -8]]
	>>> matrix_divided(matrix, -3)
	Traceback (most recent call last):
		... 
	TypeError: Each row of the matrix must have the same size


Lists with diffrent sizes:
==========================


::
	>>> matrix = [[0], [-4.8, -6, -6.2, -5.4, 6.2], [7]]
	>>> matrix_divided(matrix, -3)
	Traceback (most recent call last):
		... 
	TypeError: Each row of the matrix must have the same size


Div with value 0
=================


::
	>>> matrix = [[1, 2, 3], [-4.8, -6, -6.2], [7, 6.5, 8.5]]
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
		... 
	ZeroDivisionError: division by zero



Div with values different the int and float
===========================================



::
	>>> matrix = [[1, 2, 3], [-4.8, -6, -6.2], [7, 6.5, 8.5]]
	>>> matrix_divided(matrix, None)
	Traceback (most recent call last):
		... 
	TypeError: div must be a number


::
	>>> matrix = [[1, 2, 3], [-4.8, -6, -6.2], [7, 6.5, 8.5]]
	>>> matrix_divided(matrix, "string")
	Traceback (most recent call last):
		... 
	TypeError: div must be a number


::
	>>> matrix = [[1, 2, 3], [-4.8, -6, -6.2], [7, 6.5, 8.5]]
	>>> matrix_divided(matrix, (1, 3))
	Traceback (most recent call last):
		... 
	TypeError: div must be a number


::
	>>> matrix = [[1, 2, 3], [-4.8, -6, -6.2], [7, 6.5, 8.5]]
	>>> matrix_divided(matrix, (1, "str"))
	Traceback (most recent call last):
		... 
	TypeError: div must be a number


::
	>>> matrix = [[1, 2, 3], [-4.8, -6, -6.2], [7, 6.5, 8.5]]
	>>> matrix_divided(matrix, [1, 2])
	Traceback (most recent call last):
		... 
	TypeError: div must be a number


::
	>>> matrix = [[1, 2, 3], [-4.8, -6, -6.2], [7, 6.5, 8.5]]
	>>> matrix_divided(matrix, {1: "greek", 2: "last"})
	Traceback (most recent call last):
		... 
	TypeError: div must be a number


::
	>>> matrix = [[1, 2, 3], [-4.8, -6, -6.2], [7, 6.5, 8.5]]
	>>> matrix_divided(matrix, ["last", "first", "second"])
	Traceback (most recent call last):
		... 
	TypeError: div must be a number


Div with integer and float values:
==================================


::
	>>> matrix = [[1, 2, 3], [-4.8, -6, -6.2], [7, 6.5, 8.5]]
	>>> matrix_divided(matrix, -3)
	[[-0.33, -0.67, -1.0], [1.6, 2.0, 2.07], [-2.33, -2.17, -2.83]]


::
	>>> matrix = [[1, 2, 3], [-4.8, -6, -6.2], [7, 6.5, 8.5]]
	>>> matrix_divided(matrix, -3.25)
	[[-0.31, -0.62, -0.92], [1.48, 1.85, 1.91], [-2.15, -2.0, -2.62]]


::
	>>> matrix = [[1, 2, 3], [-4.8, -6, -6.2], [7, 6.5, 8.5]]
	>>> matrix_divided(matrix, 2)
	[[0.5, 1.0, 1.5], [-2.4, -3.0, -3.1], [3.5, 3.25, 4.25]]


::
	>>> matrix = [[1, 2, 3], [-4.8, -6, -6.2], [7, 6.5, 8.5]]
	>>> matrix_divided(matrix, 1.5)
	[[0.67, 1.33, 2.0], [-3.2, -4.0, -4.13], [4.67, 4.33, 5.67]]


::
	>>> matrix = [[1, 2, 3], [-4.8, -6, -6.2], [7, 6.5, 8.5]]
	>>> matrix_divided(matrix, -4.5)
	[[-0.22, -0.44, -0.67], [1.07, 1.33, 1.38], [-1.56, -1.44, -1.89]]

